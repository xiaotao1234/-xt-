package 工厂设计模式.简单工厂;

/**
 * @author xt
 * @version 1.0
 * @date 2020/5/14 11:15
 */
public class Factory {//简单的工厂的核心就是不对工厂进行抽象，只对请求进行抽象，
    //优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,
    // 决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界可以从直接创建具
    // 体产品对象的尴尬局面摆脱出来,仅仅需要负责“消费”对象就可以了。而不必
    // 管这些对象究竟如何创建及如何组织的．明确了各自的职责和权利，有利于整
    // 个软件体系结构的优化。

    //缺点：违背了开闭原则,由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，
    // 将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添
    // 加新的类，则就需要改变工厂类了。违反开闭原则 。
    //当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．
    // 这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，
    // 对系统的维护和扩展非常不利；
    public Request getRequest(String requesttype) {
        Request request = null;
        if (requesttype == "net") {
            request = new NetworkRequest();
        } else if (requesttype == "memory") {
            request = new MemoryRequest();
        }
        return request;
    }
}
